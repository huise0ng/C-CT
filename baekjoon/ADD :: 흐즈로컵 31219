#include <iostream>
#include <vector>
#include <cmath>
#include <algorithm>
using namespace std;

// 두 점 사이의 유클리드 거리를 계산하는 함수
double euclidean_distance(pair<int, int> a, pair<int, int> b)
{
    return sqrt(pow(a.first - b.first, 2) + pow(a.second - b.second, 2));
}

int main()
{
    int n;
    cin >> n;
    vector<pair<int, int>> countries(n);
    for (int i = 0; i < n; ++i)
    {
        cin >> countries[i].first >> countries[i].second;
    }

    double min_cost = numeric_limits<double>::max();
    vector<int> perm(n);
    for (int i = 0; i < n; ++i)
    {
        perm[i] = i;
    }

    do
    {
        double cost = 0;
        for (int i = 0; i < n - 1; ++i)
        {
            cost += euclidean_distance(countries[perm[i]], countries[perm[i + 1]]);
        }
        cost += euclidean_distance(countries[perm[n - 1]], countries[perm[0]]); // 돌아오는 비용
        min_cost = min(min_cost, cost);
    } while (next_permutation(perm.begin(), perm.end()));

    cout.precision(15);
    cout << min_cost << endl;
    return 0;
}
